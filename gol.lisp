(ql:quickload :cl-trample)
(in-package :cl-trample)

(defparameter *grid-width* 400)
(defparameter *grid-height* 300)
(defparameter *grid-cell* nil)
(defparameter *alive-cell-color* nil)
(defparameter *dead-cell-color*  nil)
(defparameter *do-refresh* t)
(defparameter *grid-texture* nil)
(defparameter *world* nil)

(defclass life-world ()
  ((grid-1 :accessor grid-1)
   (grid-2 :accessor grid-2)
   (grid-pointer :accessor grid-pointer)))

(defun create-grid-array ()
  (make-array (list *grid-height* *grid-width*) :element-type 'bit :initial-element 0))

(defmacro at-pos (generation x y)
  `(aref ,generation ,y ,x))

(defun make-life-world ()
  (let ((world (make-instance 'life-world)))
    (setf (grid-1 world) (create-grid-array))
    (setf (grid-2 world) (create-grid-array))
    (setf (grid-pointer world) :grid-1)
    world)
  )

(defmethod generation ((w life-world))
  (if (eq (grid-pointer w) :grid-1)
      (grid-1 w)
      (grid-2 w)))

(defmethod next-generation ((w life-world))
  (if (eq (grid-pointer w) :grid-2)
      (grid-1 w)
      (grid-2 w)))



(defmethod step-generation ((w life-world))
  (if (eq (grid-pointer w) :grid-1)
      (setf (grid-pointer w) :grid-2)
      (setf (grid-pointer w) :grid-1)))


(defun setup ()
  (let ((world (make-life-world)))
    (setf *grid-texture* (sdl2:create-texture *renderer* sdl2:+pixelformat-rgb888+ 1 *grid-width* *grid-height*))
    (setf *alive-cell-color* (sdl2:map-rgb *window-format* 0 200 0))
    (setf *dead-cell-color*  (sdl2:map-rgb *window-format* 0 0 0))
    (setf *grid-cell* (sdl2:make-rect 0 0 1 1))
    (seed (generation world) 1000 0 0 *grid-width* *grid-height*)
    (setf *world* world)
    world))

(defun seed (generation count x y width height)
  (dotimes (n count)
    (setf (at-pos generation (+ x (random width)) (+ y (random height))) 1)
    ))

(defun deadp (generation x y)
  (declare (type fixnum x y))
  (declare (type (simple-array bit *) generation))
  (or (< x 0) (>= x *grid-width*)
      (< y 0) (>= y *grid-height*)
      (= (at-pos generation x y) 0)))

(defun livep (generation x y)
  (not (deadp generation x y)))

(defun score-cell (generation x y)
  (if (livep generation x y) 1 0))

(defun kill-cell (generation x y)
  (setf (at-pos generation x y) 0))

(defun birth-cell (generation x y)
  (setf (at-pos generation x y) 1))

(defparameter neighbor-offsets '((-1 -1) (0 -1) (1 -1)
				 (-1 0)         (1 0)
				 (-1 1)  (0  1) (1 1)))

(defun neighbor-count (generation x y)
  (declare (type fixnum x y))
  (+ (score-cell generation (- x 1) (- y 1))
     (score-cell generation x (- y 1))
     (score-cell generation (+ x 1) (- y 1))
     (score-cell generation (- x 1) y)
     (score-cell generation (+ x 1) y)
     (score-cell generation (- x 1) (+ y 1))
     (score-cell generation x (+ y 1))
     (score-cell generation (+ x 1) (+ y 1))))



(defun update (world)
  (declare (optimize (speed 3) (safety 0)))
  (let ((current (generation world))
	(next (next-generation world)))
    (declare (type (simple-array bit *) current next))
    (dotimes (y *grid-height*)
      (declare (type fixnum y))
      (dotimes (x *grid-width*)
	(declare (type fixnum x))	
	(let ((n (neighbor-count current x y)))
	  (declare (type fixnum n))
	  (cond
	    ((and (livep current x y) (< n 2))
	     (kill-cell next x y))
	    ((and (livep current x y)
		  (or (= n 2) (= n 3)))
	     (birth-cell next x y))
	    ((and (livep current x y)
		  (> n 3))
	     (kill-cell next x y))
	    ((and (deadp current x y)
		  (= n 3))
	     (birth-cell next x y))
	    (t (kill-cell next x y)))
	  )
	))
    (step-generation world)
    (setf *do-refresh* t)
    ))

(defun pixel-pos->grid-pos (px py)
  (let ((gx (floor (* px (/ *grid-width* *width*))))
	(gy (floor (* py (/ *grid-height* *height*)))))
    (values gx gy))
  )


(defun on-mouse-click (px py state world)
  (declare (ignore state))
  (multiple-value-bind (px py) (pixel-pos->grid-pos px py)
    (let* ((width 50)
	   (height 50)
	   (px (clamp (- px (/ width 2)) 0 px))
	   (py (clamp (- py (/ height 2)) 0 py))
	   (width (clamp width 0 (- *grid-width* px)))
	   (height (clamp height 0 (- *grid-height* py)))
	   )
      (format t "(~a,~a) w: ~a h: ~a | " px py width height)
      (seed (generation world) 500 px py width height)
      ))
  )


(defun draw (world)
  (when *do-refresh*
    (let ((tex-ptr (sdl2:lock-texture *grid-texture*))
	  (current (generation world)))
      (declare (type SB-SYS:system-area-pointer tex-ptr))
      (dotimes (y *grid-height*)
	(dotimes (x *grid-width*)
	  (setf (cffi:mem-aref tex-ptr :unsigned-int (+ x (* y *grid-width*)))
		(if (= 0 (at-pos current x y))
		    *dead-cell-color*
		    *alive-cell-color*)))
	))
    (sdl2:unlock-texture *grid-texture*)
    (sdl2:render-copy *renderer* *grid-texture*)
    (setf *do-refresh* nil))
  )


(toggle-fps)
(defvar *scenario* (make-scenario #'setup #'update #'draw))
(start *scenario*)
