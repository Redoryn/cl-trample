;;;; cl-trample.lisp

(in-package #:cl-trample)

;;(setf red-color (sdl2:map-rgb *window-format* 255 0 0))
;;(setf green-color (sdl2:map-rgb *window-format* 0 255 0))

(setf r-value 0)
(setf texture nil)
(defun main (renderer)
  (declare (optimize (speed 3) (safety 0)))
  (declare (type integer i))
  (declare (type system-area-pointer pixels))
  
  (sdl2:render-clear renderer)
  (when (null texture)
    (setf texture (sdl2:create-texture renderer sdl2:+pixelformat-rgb888+ 1 *width* *height*)))
  (let ((a-pixel (sdl2:map-rgb *window-format*
			       (random 255) (random 255) (random 255)
			       ))
	(pixels (sdl2:lock-texture texture)))
    ;(print (type-of pixels))
    (dotimes (i (* *width* *height*))
	 (setf (cffi:mem-aref pixels :unsigned-int i)
	       (sdl2:map-rgb *window-format* (random 255) (random 255) (random 255)))
	 ))
  (sdl2:unlock-texture texture)
  (sdl2:render-copy renderer texture))

;; (defun randomize-pixels ()
;;   (declare (optimize (speed 3) (safety 0)))
;;   (dotimes (i (length *pixels*))
;;     (setf (aref *pixels* i)
	  
;; 	  )))

(defparameter *height* 600)
(defparameter *width* 800)
(defparameter *pixels* (make-array (* *height* *width*)))
(defparameter *window-surface* nil)
(defparameter *window-format* nil)
(defparameter *fps-timer* nil)
(defparameter *counted-frames* 0)

(defun fps ()
  (let ((avgFps (/ *counted-frames* (/ (sdl2:get-ticks) 1000.0))))
    (print avgFps)
  ))

(defun start ()
  (sdl2:with-init (:everything)
    (sdl2:with-window (win :title "Let's make it happen!" :w *width* :h *height* :flags '(:shown))
      (setf *window-surface* (sdl2:get-window-surface win))
      (setf *window-format* (sdl2:surface-format *window-surface*))
      (print *window-format*)
      (sdl2:with-renderer (renderer win :flags '(:accelerated))
	(sdl2:with-event-loop (:method :poll)
	  (:keyup
	   (:keysym keysym)
	   (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-escape)
	     (sdl2:push-event :quit)))
	  (:idle
	   ()
	   (main renderer)
	   (sdl2:render-present renderer)
	   (setf *counted-frames* (1+ *counted-frames*))
	   (fps)
	   ;(sdl2:delay 16)
	   )
	  (:quit () t))))))
