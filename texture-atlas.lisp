(in-package #:cl-trample)

(defparameter *color-texture* nil)
(defparameter *texture-atlas* (make-hash-table :test 'equal))
(defparameter *next-x* 0)
(defparameter *next-y* 0)

(defclass sprite ()
  ((texture :initform nil :accessor texture)
   (src-rect :initform nil :accessor src-rect)
   (dest-rect :initform nil :accessor dest-rect)))

(defun texture-atlas ()
  (setf *color-texture* (sdl2:create-texture *renderer* sdl2:+pixelformat-rgb888+ 2 100 1))
  (add-color-sprite "red" 255 0 0 255)
  (add-color-sprite "green" 0 255 0 255)
  (add-sprite "ball" "G:/assets/ball.bmp" 250 211)
  )

(defun get-texture ()
  *texture-atlas-texture*)

(defun get-sprite (name)
  (gethash name *texture-atlas*))

(defun get-color-texture ()
  *color-texture*)

(defun add-color-sprite (name r g b a)
  (let* ((texture (get-color-texture))
	 (width 1)
	 (height 1)
	 (x *next-x*)
	 (y *next-y*)
	 (sprite (make-instance 'sprite))
	 (src-rect (sdl2:make-rect x y width height)))
    (sdl2:set-render-target *renderer* texture)
    (sdl2:set-render-draw-color *renderer* r g b a)
    (sdl2:render-fill-rect *renderer* src-rect)
    (sdl2:set-render-target *renderer* nil)
    (setf (src-rect sprite) src-rect)
    (setf (dest-rect sprite) (sdl2:make-rect 0 0 0 0))
    (setf (texture sprite) texture)
    (setf (gethash name *texture-atlas*)
	  sprite)
    (setf *next-x* (1+ *next-x*)))
  )


(defun add-sprite (name filepath width height)
  (let ((surface (sdl2:load-bmp filepath)))
    (sdl2:set-color-key surface 1 (sdl2:map-rgb *window-format* 255 255 255))
    (let* ((texture (sdl2:create-texture-from-surface *renderer* surface))
	   (sprite (make-instance 'sprite)))
      (setf (src-rect sprite) (sdl2:make-rect 0 0 width height))
      (setf (dest-rect sprite) (sdl2:make-rect 0 0 0 0))
      (setf (texture sprite) texture)
      (setf (gethash name *texture-atlas*) sprite)
      )
    )
  )
